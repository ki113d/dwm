--- a/dwm.c	2012-02-12 10:56:30.316137254 +0200
+++ b/dwm.c	2012-02-12 10:56:30.319137254 +0200
@@ -52,7 +52,7 @@
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
-#define TAGMASK                 ((1 << LENGTH(tags)) - 1)
+#define TAGMASK                 ((1 << LENGTH(tags[0])) - 1)
 #define TEXTW(X)                (textnw(X, strlen(X)) + dc.font.height)
 #define MAXCOLORS               8
 
@@ -184,7 +184,7 @@ static void clientmessage(XEvent *e);
 static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
-static Monitor *createmon(void);
+static Monitor *createmon(int monitor);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
@@ -318,10 +318,10 @@ static Window root;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
-static unsigned int scratchtag = 1 << LENGTH(tags);
+static unsigned int scratchtag = 1 << LENGTH(tags[0]);
 
 /* compile-time check if all tags fit into an unsigned int bit array. */
-struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
+struct NumTags { char limitexceeded[LENGTH(tags[0]) > 31 ? -1 : 1]; };
 
 /* function implementations */
 void
@@ -476,9 +476,9 @@ buttonpress(XEvent *e) {
 	if(ev->window == selmon->barwin) {
 		i = x = 0;
 		do
-			x += TEXTW(tags[i].name);
-		while(ev->x >= x && ++i < LENGTH(tags));
-		if(i < LENGTH(tags)) {
+			x += TEXTW(tags[selmon->num][i].name);
+		while(ev->x >= x && ++i < LENGTH(tags[0]));
+		if(i < LENGTH(tags[0])) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
 		}
@@ -690,9 +690,9 @@ configurerequest(XEvent *e) {
 }
 
 Monitor *
-createmon(void) {
+createmon(int monitor) {
 	Monitor *m;
-	int i, numtags = LENGTH(tags) + 1;
+	int i, numtags = LENGTH(tags[0]) + 1;
 
 	if(!(m = (Monitor *)calloc(1, sizeof(Monitor))))
 		die("fatal: could not malloc() %u bytes\n", sizeof(Monitor));
@@ -711,9 +711,9 @@ createmon(void) {
 	m->topbar = topbar;
 	m->curtag = m->prevtag = 1;
 	for(i = 1; i < numtags; i++) {
-		m->mfacts[i] = tags[i - 1].mfact < 0 ? mfact : tags[i - 1].mfact;
-		m->nmasters[i] = tags[i - 1].nmaster < 0 ? nmaster : tags[i - 1].nmaster;
-		m->lts[i] = tags[i - 1].layout;
+		m->mfacts[i] = tags[monitor][i - 1].mfact < 0 ? mfact : tags[monitor][i - 1].mfact;
+		m->nmasters[i] = tags[monitor][i - 1].nmaster < 0 ? nmaster : tags[monitor][i - 1].nmaster;
+		m->lts[i] = tags[monitor][i - 1].layout;
 	}
 	m->lt[0] = m->lts[m->curtag];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
@@ -790,10 +790,10 @@ drawbar(Monitor *m) {
 			urg |= c->tags;
 	}
 	dc.x = 0;
-	for(i = 0; i < LENGTH(tags); i++) {
-		dc.w = TEXTW(tags[i].name);
+	for(i = 0; i < LENGTH(tags[0]); i++) {
+		dc.w = TEXTW(tags[m->num][i].name);
 		col = dc.colors[ (urg & 1 << i) ? 2 : (m->tagset[m->seltags] & 1 << i) ? 1 : 0 ];
-		drawtext(tags[i].name, col, True);
+		drawtext(tags[m->num][i].name, col, True);
 		drawsquare(m == selmon && selmon->sel && selmon->sel->tags & 1 << i, occ & 1 << i, col);
 		dc.x += dc.w;
 	}
@@ -2097,9 +2097,9 @@ updategeom(void) {
 			for(i = 0; i < (nn - n); i++) { /* new monitors available */
 				for(m = mons; m && m->next; m = m->next);
 				if(m)
-					m->next = createmon();
+					m->next = createmon(i);
 				else
-					mons = createmon();
+					mons = createmon(i);
 			}
 			for(i = 0, m = mons; i < nn && m; m = m->next, i++)
 				if(i >= n
@@ -2140,7 +2140,7 @@ updategeom(void) {
 	/* default monitor setup */
 	{
 		if(!mons)
-			mons = createmon();
+			mons = createmon(0);
 		mons->status = 1;
 		if(mons->mw != sw || mons->mh != sh) {
 			dirty = True;
@@ -2462,10 +2462,10 @@ int
 shifttag(int dist) {
 	int i, curtags;
 	int seltag = 0;
-	int numtags = LENGTH(tags);
+	int numtags = LENGTH(tags[0]);
 
 	curtags = selmon->tagset[selmon->seltags];
-	for(i = 0; i < LENGTH(tags); i++) {
+	for(i = 0; i < LENGTH(tags[0]); i++) {
 		if((curtags & (1 << i)) != 0) {
 			seltag = i;
 			break;
